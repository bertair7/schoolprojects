import java.lang.*;
import java.util.*;

public class MyHashTable<T> {

   private LinkedList<T> [] table;
   public MyHashTable(int val) {
      table = (LinkedList<T> []) new LinkedList[val];
      for(int i = 0; i < table.length; i++)
         table[i] = new LinkedList<T>();
   }

   public void insert(T item) { 
      int index = hash(item);
      table[index].addFirst(item);
   }

   public void delete(T item) {
      int index = hash(item);
      int location = table[index].indexOf(item);
      if(location >= 0) 
         table[index].remove(location);
   }

   public boolean find(T item) {
      int index = hash(item);
      return table[index].contains(item);      
   }

   public boolean isEmpty() {
      for(int i = 0; i < table.length; i++) {
         if(table[i].size() != 0)
            return false;
      }
      return true;
   }

   public void print() {
      for(int i = 0; i < table.length; i++) {
         System.out.print(i + ": ");
         for(int j = 0; j < table[i].size(); j++) {
	    System.out.print(table[i].get(j) + " ");
	 }
	 System.out.println();
      }
   }

   private int hash(T item) {
      return Math.abs(item.hashCode()) % table.length;
   }

   public void makeEmpty() {
      for(int i = 0; i < table.length; i++)
         table[i].clear();
   }

   public int size() {
      int count = 0;
      for(int i = 0; i < table.length; i++) {
         count += table[i].size();
      }
      return count;
   }

   public Iterator<T> iterator() {
      return new Iter();
   }

   private class Iter implements Iterator<T> {
      public int i;
      public int j;

      public Iter() {
	 j = 0;
         boolean found = false;
	 i = 0;

         while(!found && i < table.length) {
	    if(table[i].size() > 0) 
	       found = true;
            else 
               i++;
         }
      }

      public boolean hasNext() {
  	 return i < table.length;
      }

      public T next() {
         if(!hasNext())
	    throw new NoSuchElementException();

   	 T temp = table[i].get(j);
	 j++;
	 boolean found = false;

	 if(j >= table[i].size()) {
            j = 0; 
            i++;
	    while(!found && i < table.length) {
	       if(table[i].size() == 0) 
	          i++;
	       else
		  found = true;
	    }
         }
         return temp;
      }
 
      public void remove() {
         throw new UnsupportedOperationException();
      }
   }

}
